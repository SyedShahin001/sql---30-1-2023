1) LOGIN.JS

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
//import 'bootstrap/dist/css/bootstrap.min.css';
import './Login.css';
 
function Login() {
  const [userEmail, setEmailAddress] = useState('');
  const [password, setPassword] = useState('');
  const [loginMessage, setLoginMessage] = useState('');
  const navigate = useNavigate();
 
  const handleLogin = async () => {
    if (!userEmail || !password) {
      setLoginMessage('Please fill in both email and password');
      return;
    }
  
    try {
      const response = await fetch('https://localhost:7017/api/Users', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
  
      if (!response.ok) {
        throw new Error('Error fetching user data');
      }
  
      const allUserData = await response.json();
      console.log('All Users:', allUserData);
  
      const user = allUserData.find(
        (user) => user.email.toLowerCase() === userEmail.toLowerCase()
      );
      console.log('User:', user);
  
      if (user && user.password === password) {
        
        navigate('/Home');
        console.log('Login');
      } else {
        setLoginMessage('Invalid email or password');
      }
    } catch (error) {
      console.error('Error during login:', error);
      setLoginMessage('An error occurred while logging in');
    }
  };
  
  
  

 
  const handleRegisterClick = () => {
    navigate('/Registration'); 
  };
 
  return (
    <div className="login-container" style={{ backgroundImage: 'url("https://t4.ftcdn.net/jpg/01/19/11/55/360_F_119115529_mEnw3lGpLdlDkfLgRcVSbFRuVl6sMDty.jpg")' }}>
      <div className="login-column">
        <h2>Login</h2>
        <div>
          <input
            type="email"
            placeholder="EmailAddress"
            value={userEmail}
            onChange={(e) => setEmailAddress(e.target.value)}
          />
        </div>
        <div>
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <div className="button-container">
          <button onClick={handleLogin}>Login</button>
          </div>
          <div className="button-container">
          <button onClick={handleRegisterClick}>Register</button>
        </div>
        <p className="error-message">{loginMessage}</p>
      </div>
    </div>
  );
}
 
export default Login;
 
 
/* Login.css */
 
.login-container {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: #f4f4f4; 
  }
 
  .login-column {
    text-align: center;
    width: 300px;
    padding: 20px;
    background-color: #ffffff; 
    border: 1px solid #ccc;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); 
  }
 
  .login-column h2 {
    color: #333; 
  }
 
  .login-column input {
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    box-sizing: border-box;
  }
 
  .login-column button {
    width: 100%;
    padding: 10px;
    background-color: #4caf50; 
    color: #fff; 
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
 
  .login-column button:hover {
    background-color: #45a049; 
  }
 
  .error-message {
    color: red;
    margin-top: 10px;
  }

  -------------------------------------------------------------------
2)
// Registration.js

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './Registration.css';

const Registration = () => {
  const [formData, setFormData] = useState({
    username: '',
    useremail: '',
    userpassword: '',
    phonenumber: '', 
  });

  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const validateEmail = (email) => {
   
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePhone = (phone) => {
   
    const phoneRegex = /^\d{10}$/;
    return phoneRegex.test(phone);
  };

  const checkDuplicateUser = async () => {
    try {
      const response = await fetch(
        `https://localhost:7017/api/Users?email=${formData.useremail}&phone=${formData.phonenumber}`
      );
      const data = await response.json();
      console.log('Duplicate Check Response:', response);
      console.log('Duplicate Check Data:', data);
      return data.length > 0;
    } catch (error) {
      console.error('Error checking duplicate user:', error);
      return false;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

   
    if (!validateEmail(formData.useremail)) {
      setErrorMessage('Incorrect email format. Please enter a valid email.');
      return;
    }

    if (!validatePhone(formData.phonenumber)) {
      setErrorMessage('Phone number must be 10 digits.');
      return;
    }

    
    const isDuplicateUser = await checkDuplicateUser();
    console.log('Is Duplicate User:', isDuplicateUser);

    try {
      console.log(formData);

     
      const response = await fetch('https://localhost:7017/api/Users/Register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          
          userName: formData.username,
          email: formData.useremail,
          password: formData.userpassword,
          phone: formData.phonenumber,
        }),
      });

      const responseData = await response.json();

      if (response.ok) {
        setSuccessMessage('Registration successful!');
        setErrorMessage('');
      } else {
        setErrorMessage(`Registration failed: ${responseData.message || 'Unknown error'}`);
        setSuccessMessage('');
      }
    } catch (error) {
      console.error('Error during registration:', error);
      setSuccessMessage('');
      setErrorMessage('An error occurred while processing your request.');
    }
  };

  return (
    <div className="registration-container">
      <div className="registration-form">
        <h2>Registration</h2>
        <form onSubmit={handleSubmit}>
          <label>
            Username:
            <input type="text" name="username" value={formData.username} onChange={handleChange} required />
          </label>
          <br />
          <label>
            Email:
            <input type="email" name="useremail" value={formData.useremail} onChange={handleChange} required />
          </label>
          <br />
          <label>
            Password:
            <input type="password" name="userpassword" value={formData.userpassword} onChange={handleChange} required />
          </label>
          <br />
          <label>
            Phone:
            <input type="tel" name="phonenumber" value={formData.phonenumber} onChange={handleChange} required />
          </label>
          <br />
          <button type="submit">Register</button>
        </form>
        {successMessage && <p className="registration-message" style={{ color: 'green' }}>{successMessage}</p>}
        {errorMessage && <p className="registration-message" style={{ color: 'red' }}>{errorMessage}</p>}
       
        <p className="login-link">Already have an account? <Link to="/login">Login</Link></p>
      </div>
    </div>
  );
};

export default Registration;

/* Registration.css */
 
.registration-container {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: #f4f4f4; /* Background color for the entire page */
  }
 
  .registration-form {
    text-align: center;
    width: 300px;
    padding: 20px;
    background-color: #ffffff; /* Background color for the registration form */
    border: 1px solid #ccc;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Box shadow for a subtle lift */
  }
 
  .registration-form h2 {
    color: #333; /* Heading color */
  }
 
  .registration-form input {
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    box-sizing: border-box;
  }
 
  .registration-form button {
    width: 100%;
    padding: 10px;
    background-color: #4caf50; /* Green button color */
    color: #fff; /* Text color */
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
 
  .registration-form button:hover {
    background-color: #45a049; /* Darker green on hover */
  }
 
  .registration-message {
    margin-top: 10px;
  }
 
  .login-link {
    margin-top: 10px;
  }
------------------------------------------------------------------------
3)
import logo from './logo.svg';
import './App.css';
import Login from './Login';
import Registration from './Registration';
import Navbar from './Navbar';
import Home from './Home';
import Logout from './Logout';
import Postbook from './Postbook';
import PostingBook from './PostingBook';
import Deletebook from './Deletebook';

 
 

import {BrowserRouter, Router, Routes, Route} from 'react-router-dom';
function App() {
  return (
    <BrowserRouter>
    <Routes>
  
    <Route path="Login" element={<Login />}></Route>
    <Route path="Registration" element={<Registration />}></Route>
    <Route path="Navbar" element={<Navbar />}></Route>
    <Route path="Home" element={<Home />}></Route>
    
    <Route path="Logout" element={<Logout />}></Route>
    <Route path="Postbook" element={<Postbook />}></Route>
    <Route path="Postingbook" element={<PostingBook />}></Route>
    <Route path="Deletebook" element={<Deletebook />}></Route>
   
   
    </Routes>
   
    </BrowserRouter>
   
 
  );
}
 
export default App;
------------------------------------------------------------------------
4)NAVBAR.JS
// Navbar.js

import React from 'react';
import './Navbar.css'; 
import 'bootstrap/dist/css/bootstrap.min.css';

const Navbar = () => {
  return (
    <nav className="navbar d-flex justify-content-between align-items-center">
      
      <div className="navbar-brand">
        Online Book Store
      </div>
      <ul className="d-flex">
        <li>
          <a href="Home" className="nav-link">BookDetails</a>
        </li>
        <li>
          <a href="Postbook" className="nav-link">Updatebook</a>
        </li>
        <li>
          <a href="/PostingBook" className="nav-link">Addbook</a>
        </li>
        <li>
          <a href="/DeleteBook" className="nav-link">Deletebook</a>
        </li>
        <li>
          <a href="/Login" className="nav-link">Logout</a>
        </li>
      </ul>
    </nav>
  );
};

export default Navbar;

/* Navbar.css */

.navbar {
    background-color: #007bff; /* Navbar background color */
    padding: 10px;
    text-align: center;
  }
  
  .navbar ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  
  .navbar li {
    display: inline-block;
    margin-right: 20px;
  }
  
  .nav-link {
    text-decoration: none;
    color: #fff; /* Link text color */
    font-weight: bold;
    font-size: 16px;
    transition: color 0.3s ease; /* Smooth color transition */
  }
  
  .nav-link:hover {
    color: #ffcc00; /* Change color on hover */
  }
  
  .navbar-brand {
    font-size: 24px;
    font-weight: bold;
    color: #fff; /* Brand text color */
    margin-right: 20px;
  }
  
  .navbar-brand:hover {
    color: #ffcc00; /* Change color on hover */
  }
  -------------------------------------------------------------------------
5)ADD BOOK

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';

const PostingBook = () => {
  const [data, setData] = useState([]);
  const [newBook, setNewBook] = useState({
    bookName: '',
    author: '',
    gerne: '',
    isbn: '',
    publish: '', 
  });
  const [errorMessage, setErrorMessage] = useState('');

  useEffect(() => {
   
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch('https://localhost:7017/api/Books');
      const result = await response.json();
      setData(result);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleInputChange = (e) => {
    setNewBook({
      ...newBook,
      [e.target.name]: e.target.value,
    });
  };

  const handleAddBook = async () => {
    try {
      
      if (
        !newBook.bookName ||
        !newBook.author ||
        !newBook.gerne ||
        !newBook.isbn ||
        !newBook.publish
      ) {
        setErrorMessage('Please fill in all details');
        return;
      }

      const response = await fetch('https://localhost:7017/api/Books', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newBook),
      });

      if (!response.ok) {
        throw new Error('Failed to add book');
      }

      
      fetchData();

      setNewBook({
        bookName: '',
        author: '',
        gerne: '',
        isbn: '',
        publish: '',
      });
      setErrorMessage('');
    } catch (error) {
      console.error('Error adding book:', error);
    }
  };

  return (
    <div>
      <Navbar />
      <div style={{ textAlign: 'center', marginTop: '20px' }}>
        <h2>Books Data</h2>

       
        {errorMessage && (
          <div style={{ color: 'red', border: '1px solid red', padding: '10px', marginBottom: '10px' }}>
            {errorMessage}
          </div>
        )}

       
        <div style={{ marginTop: '20px' }}>
          <h3>Add New Book</h3>
          <form>
            <label>
              Name:
              <input type="text" name="bookName" value={newBook.bookName} onChange={handleInputChange} />
            </label>
            <label>
              Author:
              <input type="text" name="author" value={newBook.author} onChange={handleInputChange} />
            </label>
            <label>
              Genre:
              <input type="text" name="gerne" value={newBook.gerne} onChange={handleInputChange} />
            </label>
            <label>
              ISBN:
              <input type="text" name="isbn" value={newBook.isbn} onChange={handleInputChange} />
            </label>
            <label>
              Publish:
              <input type="date" name="publish" value={newBook.publish} onChange={handleInputChange} />
            </label>
            <button type="button" onClick={handleAddBook}>
              Add Book
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default PostingBook;
------------------------------------------------
6)UPDATE

//update book

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import Navbar from './Navbar';

function Postbook() {
  const [books, setBooks] = useState([]);
  const [selectedBook, setSelectedBook] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  useEffect(() => {
    
    fetchBooks();
  }, []);

  const fetchBooks = async () => {
    try {
      const response = await axios.get('https://localhost:7017/api/Books');
      setBooks(response.data);
    } catch (error) {
      console.error('Error fetching books:', error);
    }
  };

  const handleUpdateClick = (book) => {
    
    setSelectedBook(book);
  };

  const handleUpdateSubmit = async (updatedBook) => {
    try {
      
      await axios.put(`https://localhost:7017/api/Books/${updatedBook.bookId}`, updatedBook);

      fetchBooks();

     
      setSelectedBook(null);

    
      setSuccessMessage('Book details updated successfully');
      
      setTimeout(() => {
        setSuccessMessage('');
      }, 3000);
    } catch (error) {
      console.error('Error updating book:', error);
    }
  };

  return (
    <div>
      <Navbar />
      <div className="container mt-5">
        <h2 className="text-center mb-5">All Books available to Upadte</h2>
        <table className="table table-striped">
          <thead>
            <tr>
              <th>ISBN</th>
              <th>Title</th>
              <th>Author</th>
              <th>Genre</th>
              <th>Publish Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {books.map((book) => (
              <tr key={book.bookId}>
                <td>{book.isbn}</td>
                <td>{book.bookName}</td>
                <td>{book.author}</td>
                <td>{book.gerne}</td>
                <td>{book.publish}</td>
                <td>
                  <button
                    onClick={() => handleUpdateClick(book)}
                    className="btn btn-primary btn-sm"
                  >
                    Update
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {successMessage && (
          <div className="alert alert-success" role="alert">
            {successMessage}
          </div>
        )}

        {selectedBook && (
          <div className="mt-4">
            <h3 className="mb-3">Update Book</h3>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleUpdateSubmit(selectedBook);
              }}
            >
              <div className="mb-3">
                <label className="form-label">ISBN:</label>
                <input
                  type="text"
                  className="form-control"
                  value={selectedBook.isbn}
                  onChange={(e) =>
                    setSelectedBook({ ...selectedBook, isbn: e.target.value })
                  }
                />
              </div>
              <div className="mb-3">
                <label className="form-label">Title:</label>
                <input
                  type="text"
                  className="form-control"
                  value={selectedBook.bookName}
                  onChange={(e) =>
                    setSelectedBook({ ...selectedBook, bookName: e.target.value })
                  }
                />
              </div>
              <div className="mb-3">
                <label className="form-label">Author:</label>
                <input
                  type="text"
                  className="form-control"
                  value={selectedBook.author}
                  onChange={(e) =>
                    setSelectedBook({ ...selectedBook, author: e.target.value })
                  }
                />
              </div>
              <div className="mb-3">
                <label className="form-label">Genre:</label>
                <input
                  type="text"
                  className="form-control"
                  value={selectedBook.gerne}
                  onChange={(e) =>
                    setSelectedBook({ ...selectedBook, gerne: e.target.value })
                  }
                />
              </div>
              <div className="mb-3">
                <label className="form-label">Publish Date:</label>
                <input
                  type="date"
                  className="form-control"
                  value={selectedBook.publish}
                  onChange={(e) =>
                    setSelectedBook({
                      ...selectedBook,
                      publish: e.target.value,
                    })
                  }
                />
              </div>
              <button type="submit" className="btn btn-warning">
                Update Book
              </button>
            </form>
          </div>
        )}
      </div>
    </div>
  );
}

export default Postbook;
------------------------------------------------------------------
7)DELETE
import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';

const Deletebook = () => {
  const [data, setData] = useState([]);
  const [deleteSuccessMessage, setDeleteSuccessMessage] = useState('');
  const [newBook, setNewBook] = useState({
    bookName: '',
    author: '',
    gerne: '',
    isbn: '',
    publish: '',
  });

  useEffect(() => {
    
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch('https://localhost:7017/api/Books');
      const result = await response.json();
      setData(result);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleInputChange = (e) => {
    setNewBook({
      ...newBook,
      [e.target.name]: e.target.value,
    });
  };

  const handleDeleteBook = async (bookId) => {
    try {
      const response = await fetch(`https://localhost:7017/api/Books/${bookId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Failed to delete book');
      }

     
      fetchData();

      
      setDeleteSuccessMessage('Book deleted successfully');

    
      setTimeout(() => {
        setDeleteSuccessMessage('');
      }, 3000);
    } catch (error) {
      console.error('Error deleting book:', error);
    }
  };

  return (
    <div>
      <Navbar />
      <div style={{ textAlign: 'center', marginTop: '20px' }}>
        <h2>Books Data</h2>

      
        {deleteSuccessMessage && (
          <div style={{ color: 'green', border: '1px solid green', padding: '10px', marginBottom: '10px' }}>
            {deleteSuccessMessage}
          </div>
        )}

       
        <div style={{ marginTop: '20px' }}>
          <h3>Books List</h3>
          <table style={{ borderCollapse: 'collapse', width: '80%', margin: 'auto' }}>
            <thead>
              <tr style={{ borderBottom: '1px solid #ddd' }}>
                <th>ID</th>
                <th>Name</th>
                <th>Author</th>
                <th>Genre</th>
                <th>ISBN</th>
                <th>Publish Date</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              {data.map((item) => (
                <tr key={item.bookId} style={{ borderBottom: '1px solid #ddd' }}>
                  <td>{item.bookId}</td>
                  <td>{item.bookName}</td>
                  <td>{item.author}</td>
                  <td>{item.gerne}</td>
                  <td>{item.isbn}</td>
                  <td>{item.publish}</td>
                  <td>
                    <button type="button" onClick={() => handleDeleteBook(item.bookId)}>
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Deletebook;

-------------------------------------------------------------
BACK END
1)asp .net core web api
2)package: ms.entityFrameworkCore.Tools
                                  SqlServer
3)connection string
        "ConnectionStrings":{"Dbconnect":"Server=servername;Database=databasename;integrated security=true;Encrypt=false"}
4)program.cs
builder.Services.AddCors();
app.UseCors(options =>
{
options.AllowAnyOrigin();
options.AllowAnyMethod();
options.AllowAnyHeader();
});
builder.Services.AddDbContext<LibraryContext>(item => item.UseSqlServer(builder.Configuration.GetConnectionString("Dbconnect")));


5)model classes
6)dbcontext class :
using Microsoft.EntityFrameworkCore;

namespace Library.Models
{
    public class LibraryContext : DbContext
    {
        public LibraryContext(DbContextOptions<LibraryContext> options) : base(options)
        {

        }

        public DbSet<User> Users { get; set; }
        public DbSet<Book> Books { get; set; }
        public DbSet<Borrow> Borrows { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Fine> Fines { get; set; }
    }
}

7)Controllers
login and register

        //Register page
        [HttpPost("Register")]
        public async Task<ActionResult<User>> Register(User user)
        {
            var newUser = new User
            {
                UserName = user.UserName,
                UserPassword = user.UserPassword,
                UserEmail = user.UserEmail,
                UserPhone = user.UserPhone,
                
            };

            _context.Users.Add(newUser);
            await _context.SaveChangesAsync();


            return CreatedAtAction("GetUser", new { id = newUser.UserId }, newUser);
        }


        //Login Page

        [HttpPost("Login")]
        public async Task<ActionResult<User>> Login(User loginDto)
        {
            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.UserEmail == loginDto.UserEmail && u.UserPassword == loginDto.UserPassword);

            if (user == null)
            {
                return Unauthorized("Invalid userEmail or password");
            }


            return user;
        }
    }
